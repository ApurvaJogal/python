# Design automation script which accept directory name and mail id from user and create log file in that directory which contains information of running processes as its name, PID, Username. 
# After creating log file send that log file to the specified mail.
# Usage : ProcInfoLog.py Demo Marvellousinfosystem@gmail.com

# Demo is name of Directory.
#marvellousinfosystem@gmail.com is the mail id.

#use python3 instead of python

# Author : Apurva Anil Jogal
# Date : 25th April 2019

import os;
import psutil;
import time;
import urllib.request;
import smtplib;
import schedule;

from sys import *;
from email import encoders;
from email.mime.text import MIMEText;
from email.mime.base import MIMEBase;
from email.mime.multipart import MIMEMultipart;


def is_connected():
	try:
		urllib.request.urlopen('http://216.58.192.142', timeout = 5)
		return True
	except Exception as eobj:
		print(eobj);
		return False;



def MailSender(toAddress,filename, time):
	
	try:

		fromAddress = "apurvajogal@gmail.com";
				
		msg= MIMEMultipart();
		
		msg["From"]= fromAddress;
		msg["To"] =  toAddress;
		
		body = """
		Hello %s,
		Welcome to Process Monitoring Log Generator.
		Please find attached document which contains log of running processes.
		Log file is created at : %s
		
		This is an autogenerated mail.
		
		Thank you.
		Apurva Anil Jogal				
		
		"""%(toAddress,time)
		
		
		Subject = """Process log generated at : %s"""%(time);
		
		msg["Subject"]=Subject;
		
		msg.attach(MIMEText(body,'plain'));
		
		attachment = open(filename, "rb");
		
		p = MIMEBase('application','octet-stream');
		
		p.set_payload((attachment).read());
		
		encoders.encode_base64(p);
		
		p.add_header('Content-Disposition',"attachment;filename = %s" %filename)
		
		msg.attach(p);
		
		s= smtplib.SMTP('smtp.gmail.com', 587);
		
		s.starttls();
		
		#Please replace - with actual password
		s.login(fromAddress,"--------");
 		
		text = msg.as_string();
		
		s.sendmail(fromAddress,toAddress,text);
		
		s.quit();
		
		print("Log is sucessfully sent through Mail");
	except Exception as eobj:
		print("Unable to send mail.", eobj);

def ProcessLog(log_dir):
	listprocess= [];
	
	if not os.path.exists(log_dir):
		try:
			os.mkdir(log_dir);
		except Exception:
			pass;
			
	seperator = "-"*80;
	log_path = os.path.join(log_dir, "LogFile%s.txt" %time.ctime());
	fd = open(log_path, 'w');
	fd.write(seperator + "\n");
	fd.write("Process Logger %s" %time.ctime() + "\n");
	fd.write(seperator + "\n");
	
	
	for proc in psutil.process_iter():
		try:
			pinfo = proc.as_dict(attrs=['pid','name','username']);
			pinfo['vms']=proc.memory_info().vms/(1024*1024);
			listprocess.append(pinfo)
			
		except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.Zombieprocess):
			pass;
			
	for element in listprocess:
		fd.write("%s\n" %element);
		
	print("Log file is sucessfully generated at location %s" %(log_path));
	
	connected = is_connected();
	
	if connected:
		print("Connected");
		startTime = time.time();
		MailSender(argv[2],log_path,time.ctime());
		endTime=time.time();
		
		print("Took %d seconds to send mail" %(endTime-startTime));
	else:
		print("There is no internet connection");
	
def main():
	print("Application name " + argv[0]);
	
	if(len(argv) != 3):
		print("Error: Invalid number of arguments");
		exit();
	
	if((argv[1]=="-h") or (argv[1]=="-H")):
		print("This script is used to maintain log of running processes");
		exit();
		
	if((argv[1]=="-u") or (argv[1]=="-U")):
		print("Usage: Application_Name Absolute_path_of_directory ");
		exit();
	
	
	try:
	
		ProcessLog(argv[1]);
		
			
	except Exception as eobj:
		print("Error: Invalid Input");
		print(eobj);

if __name__== "__main__":
	main();

